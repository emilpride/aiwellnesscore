<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>AI Wellness Quiz - Onboarding</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.12.2/lottie.min.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/face-api.js@0.22.2/dist/face-api.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.9.2/dist/confetti.browser.min.js"></script>
    <script src="https://js.stripe.com/v3/"></script>
    <style>
        body, html {
            overscroll-behavior-y: contain;
            font-family: 'Inter', sans-serif;
            height: 100%;
            margin: 0;
            overflow: hidden;
        }
        .full-screen-container {
            height: 100vh;
            height: calc(var(--vh, 1vh) * 100);
            overflow: hidden;
            position: relative;
        }
        #swiper-container {
            transition: opacity 0.5s ease-out, transform 0.5s ease-out;
        }
        .swiper-wrapper {
            transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }
        .swiper-slide {
            flex-shrink: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            transform: scale(0.95);
            transition: opacity 0.6s ease-out, transform 0.6s ease-out;
        }
        .swiper-slide.active {
            opacity: 1;
            transform: scale(1);
        }
        .dot {
            transition: background-color 0.3s, transform 0.3s;
        }
        .dot.active {
            background-color: #8b5cf6;
            transform: scale(1.25);
        }
        .slide-content > * {
            opacity: 0;
            transform: translateY(20px);
            animation: fadeIn 0.8s 0.4s cubic-bezier(0.4, 0, 0.2, 1) forwards;
        }
        @keyframes fadeIn { to { opacity: 1; transform: translateY(0); } }
        
        /* Chat Styles */
        #chat-section {
            position: absolute; top: 0; left: 0; width: 100%; height: 100%;
            transform: translateY(100%);
            transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);
            display: flex; flex-direction: column;
        }
        #chat-section.active { transform: translateY(0); }
        .chat-container { scroll-behavior: smooth; -ms-overflow-style: none; scrollbar-width: none; }
        .chat-container::-webkit-scrollbar { display: none; }
        .chat-bubble { animation: slide-up 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94) both; }
        @keyframes slide-up { 0% { transform: translateY(20px); opacity: 0; } 100% { transform: translateY(0); opacity: 1; } }
        .bot-avatar-lottie { width: 40px; height: 40px; background-color: #5b21b6; border-radius: 50%; }
        .options-container { -ms-overflow-style: none; scrollbar-width: none; }
        .options-container::-webkit-scrollbar { display: none; }
        .option-btn { transition: background-color 0.2s ease-in-out, transform 0.2s ease-in-out; }
        .option-btn:hover { transform: translateY(-2px); }
        
        /* Camera Modal Styles */
        #camera-modal { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.8); z-index: 100; display: flex; align-items: center; justify-content: center; opacity: 0; pointer-events: none; transition: opacity 0.3s ease; }
        #camera-modal.active { opacity: 1; pointer-events: all; }
        #camera-container { position: relative; width: 90%; max-width: 400px; aspect-ratio: 3/4; overflow: hidden; border-radius: 1.5rem; background: #111; border: 1px solid rgba(255,255,255,0.2); }
        #camera-video { width: 100%; height: 100%; object-fit: cover; transform: scaleX(-1); }
        #camera-canvas { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }
        #camera-overlay { position: absolute; bottom: 0; left: 0; right: 0; padding: 1.5rem; text-align: center; }
        #camera-status { background-color: rgba(0,0,0,0.5); padding: 0.5rem 1rem; border-radius: 9999px; display: inline-block; color: white; font-weight: 500; transition: background-color 0.3s; }
        .slider-widget { padding: 1rem; background-color: #faf5ff; border-radius: 1rem; border: 1px solid #e9d5ff; }
        .confirm-btn { margin-top: 1rem; width: 100%; background-color: #7c3aed; color: white; font-weight: bold; padding: 0.75rem; border-radius: 0.75rem; transition: background-color 0.2s; }
        .confirm-btn:hover { background-color: #6d28d9; }
    </style>
</head>
<body class="bg-gray-50">

<div id="app-container" class="full-screen-container bg-white">
    
    <!-- === ONBOARDING SWIPER === -->
    <div id="swiper-container" class="relative w-full h-full flex flex-col">
        <div class="flex-grow w-full h-full overflow-hidden">
            <div id="swiper-wrapper" class="swiper-wrapper flex h-full">
                
                <div class="swiper-slide flex items-center justify-center p-8">
                    <div class="text-center slide-content">
                        <div id="dave-animation" class="w-48 h-48 mx-auto"></div>
                        <h1 class="text-3xl font-bold text-gray-800 mt-4">Hi! I'm Dave.</h1>
                        <p class="text-gray-600 mt-2">Your personal AI wellness assistant. Let's unlock your potential together.</p>
                    </div>
                </div>

                <div class="swiper-slide flex items-center justify-center p-8">
                    <div class="text-left w-full max-w-sm slide-content">
                        <h2 class="text-2xl font-bold text-gray-800 text-center mb-6">What you'll get:</h2>
                        <ul class="space-y-4">
                            <li class="flex items-center" style="animation-delay: 0.5s;"><span class="text-2xl mr-3">üéØ</span> <div><h3 class="font-semibold">Wellness Score</h3><p class="text-sm text-gray-500">Your holistic health assessment</p></div></li>
                            <li class="flex items-center" style="animation-delay: 0.7s;"><span class="text-2xl mr-3">‚è≥</span> <div><h3 class="font-semibold">Biological Age</h3><p class="text-sm text-gray-500">Find out how "young" your body is</p></div></li>
                            <li class="flex items-center" style="animation-delay: 0.9s;"><span class="text-2xl mr-3">üåø</span> <div><h3 class="font-semibold">Skin & Stress Analysis</h3><p class="text-sm text-gray-500">Discover hidden lifestyle factors</p></div></li>
                            <li class="flex items-center" style="animation-delay: 1.1s;"><span class="text-2xl mr-3">üó∫Ô∏è</span> <div><h3 class="font-semibold">Personalized Plan</h3><p class="text-sm text-gray-500">A 7-day action plan for improvement</p></div></li>
                        </ul>
                    </div>
                </div>

                <div class="swiper-slide flex items-center justify-center p-8">
                    <div class="text-center slide-content">
                        <h2 class="text-2xl font-bold text-gray-800 mb-6">Lower Your Biological Age</h2>
                        <div class="flex justify-center items-center space-x-8">
                            <div class="text-center">
                                <p class="text-gray-500">Chronological</p>
                                <p id="chrono-age" class="text-5xl font-bold text-gray-400">35</p>
                            </div>
                            <div id="arrow-animation" class="w-24 h-24"></div>
                             <div class="text-center">
                                <p class="text-purple-600 font-semibold">Biological</p>
                                <p id="bio-age" class="text-6xl font-extrabold text-purple-600">32</p>
                            </div>
                        </div>
                         <p class="text-gray-600 mt-6 max-w-xs mx-auto">Our plan will help you feel younger and more energetic.</p>
                    </div>
                </div>

                <div class="swiper-slide flex items-center justify-center p-8">
                    <div class="text-center max-w-sm slide-content">
                        <h2 class="text-2xl font-bold text-gray-800 mb-8">Your Privacy is Our Priority</h2>
                        <div class="space-y-6">
                            <div class="flex items-center text-left" style="animation-delay: 0.5s;"><span class="text-3xl mr-4">üì∏</span><p class="text-gray-600">Your photo is **never stored** and is deleted immediately after analysis.</p></div>
                            <div class="flex items-center text-left" style="animation-delay: 0.7s;"><span class="text-3xl mr-4">üîí</span><p class="text-gray-600">All data is anonymized and protected with end-to-end encryption.</p></div>
                            <div class="flex items-center text-left" style="animation-delay: 0.9s;"><span class="text-3xl mr-4">‚öïÔ∏è</span><p class="text-gray-600">This is not medical advice. All recommendations are for informational purposes only.</p></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="py-8 px-6">
            <div id="dots-container" class="flex justify-center items-center space-x-3 mb-6"></div>
            <button id="start-quiz-btn" class="w-full bg-purple-600 text-white font-bold py-4 px-4 rounded-xl hover:bg-purple-700 transition-transform transform hover:scale-105 shadow-lg shadow-purple-200">
                Let's start
            </button>
        </div>
    </div>

    <!-- === CHAT INTERFACE (initially hidden) === -->
    <div id="chat-section" class="bg-white">
        <div class="w-full bg-gray-200"><div id="progress-bar" class="h-2 bg-gradient-to-r from-purple-500 to-indigo-500" style="width: 0%; transition: width 0.5s ease-in-out;"></div></div>
        <div id="chat-container" class="flex-1 p-6 overflow-y-auto chat-container"></div>
        <div id="options-container-wrapper" class="px-4 pt-1 pb-2 hidden"><div id="options-container" class="flex gap-2 overflow-x-auto py-2 options-container"></div></div>
        <div id="input-area" class="p-4 border-t border-gray-200 hidden">
            <div class="flex items-center gap-2">
                <input type="text" id="user-input" placeholder="Type your answer..." class="flex-1 w-full px-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-purple-500">
                <button id="send-btn" class="bg-purple-600 text-white rounded-full p-3 hover:bg-purple-700 transition-colors"><svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" /></svg></button>
            </div>
        </div>
         <div id="payment-form-container"></div>
    </div>

</div>

<!-- Camera Modal -->
<div id="camera-modal">
    <div id="camera-container">
        <video id="camera-video" autoplay muted playsinline></video><canvas id="camera-canvas"></canvas>
        <div id="camera-loader" class="absolute inset-0 bg-black/50 flex flex-col items-center justify-center text-white text-center p-4"><svg class="animate-spin h-8 w-8 text-white mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg><p id="loader-text" class="text-lg font-semibold">Initializing AI models...</p></div>
        <div id="camera-overlay"><p id="camera-status">Position your face in the frame</p></div>
    </div>
</div>

<script>
    // --- Full Screen Mobile Helper ---
    const setVh = () => {
        const vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', `${vh}px`);
    };
    window.addEventListener('resize', setVh);
    setVh();

    // --- Lottie Animations ---
    lottie.loadAnimation({ container: document.getElementById('dave-animation'), renderer: 'svg', loop: true, autoplay: true, path: 'assistent.json' });
    lottie.loadAnimation({ container: document.getElementById('arrow-animation'), renderer: 'svg', loop: true, autoplay: true, path: 'https://assets2.lottiefiles.com/packages/lf20_l5qvxiqp.json' });
    
    // --- Swiper Logic ---
    const swiperWrapper = document.getElementById('swiper-wrapper');
    const slides = document.querySelectorAll('.swiper-slide');
    const dotsContainer = document.getElementById('dots-container');
    const startQuizBtn = document.getElementById('start-quiz-btn');
    let currentSlide = 0;
    let autoSwipeTimer;
    let touchStartX = 0;
    let touchEndX = 0;

    function goToSlide(slideIndex) {
        currentSlide = slideIndex;
        swiperWrapper.style.transform = `translateX(-${currentSlide * 100}%)`;
        slides.forEach((slide, index) => slide.classList.toggle('active', index === currentSlide));
        const dots = document.querySelectorAll('.dot');
        dots.forEach((dot, index) => dot.classList.toggle('active', index === currentSlide));
        resetAutoSwipe();
    }
    function nextSlide() { goToSlide((currentSlide + 1) % slides.length); }
    function resetAutoSwipe() { clearInterval(autoSwipeTimer); autoSwipeTimer = setInterval(nextSlide, 3000); }
    slides.forEach((_, index) => {
        const dot = document.createElement('div');
        dot.className = 'dot w-2 h-2 bg-gray-300 rounded-full cursor-pointer';
        if (index === 0) dot.classList.add('active');
        dot.addEventListener('click', () => goToSlide(index));
        dotsContainer.appendChild(dot);
    });
    swiperWrapper.addEventListener('touchstart', e => { touchStartX = e.changedTouches[0].screenX; clearInterval(autoSwipeTimer); });
    swiperWrapper.addEventListener('touchend', e => { touchEndX = e.changedTouches[0].screenX; handleSwipe(); resetAutoSwipe(); });
    function handleSwipe() {
        if (touchEndX < touchStartX - 50) nextSlide();
        if (touchEndX > touchStartX + 50) goToSlide((currentSlide - 1 + slides.length) % slides.length);
    }
    goToSlide(0);

    // --- Transition to Chat ---
    startQuizBtn.addEventListener('click', () => {
        clearInterval(autoSwipeTimer);
        const swiperContainer = document.getElementById('swiper-container');
        const chatSection = document.getElementById('chat-section');
        swiperContainer.style.opacity = '0';
        swiperContainer.style.transform = 'scale(0.95)';
        setTimeout(() => {
            swiperContainer.style.display = 'none';
            chatSection.classList.add('active');
            initQuiz();
        }, 500);
    });
    
    // --- FULL QUIZ LOGIC FROM quiz.html ---
    
    // DOM Elements & State
    const mainContainer = document.getElementById('app-container'), chatContainer = document.getElementById('chat-container'), optionsContainer = document.getElementById('options-container'), optionsContainerWrapper = document.getElementById('options-container-wrapper'), inputArea = document.getElementById('input-area'), progressBar = document.getElementById('progress-bar'), cameraModal = document.getElementById('camera-modal'), video = document.getElementById('camera-video'), canvas = document.getElementById('camera-canvas'), cameraLoader = document.getElementById('camera-loader'), loaderText = document.getElementById('loader-text'), cameraStatus = document.getElementById('camera-status'), paymentFormContainer = document.getElementById('payment-form-container');
    let userInput = document.getElementById('user-input'), sendBtn = document.getElementById('send-btn');
    const originalInputAreaHTML = inputArea.innerHTML;
    let sessionId = null, userAnswers = {}, currentQuestionIndex = 0, detectionInterval, stream, capturedPhotoDataUrl = null, countdownInterval;
    
    // All functions from quiz.html (logErrorToServer, initializeGlobalErrorHandlers, startQuizSession, saveAnswerToServer, etc.)
    // are placed here, adapted for the new structure.

    async function logErrorToServer(errorDetails) {
        if (!sessionId) { console.error("Cannot log error: no sessionId.", errorDetails); return; }
        try {
            await fetch('/.netlify/functions/quiz', {
                method: 'POST', headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ action: 'logError', sessionId: sessionId, error: { source: 'frontend', message: errorDetails.message, details: errorDetails.details || 'N/A' } })
            });
        } catch (e) { console.error("Failed to even send the error log:", e); }
    }
    function initializeGlobalErrorHandlers() {
        window.onerror = (message, source, lineno, colno, error) => { logErrorToServer({ message: `Uncaught Error: ${message}`, details: `at ${source}:${lineno}:${colno}` }); return false; };
        window.addEventListener('unhandledrejection', event => { logErrorToServer({ message: 'Unhandled Promise Rejection', details: event.reason?.message || 'No details available' }); });
        console.log("Global error handlers initialized.");
    }
    
    const messageDelay = 1800;
    const isMobile = () => window.innerWidth <= 768;
    const scrollToBottom = () => { setTimeout(() => { chatContainer.scrollTop = chatContainer.scrollHeight; }, 0); };

    // --- Quiz Questions (English, new order) ---
    const quizQuestions = [
        { key: 'name', type: 'question', text: "Hi! I'm Dave, your AI wellness assistant. What should I call you?", placeholder: "Type your name..." },
        { key: 'intro_purpose', type: 'message', text: (name) => `Great to meet you, ${name}! To build your personalized report, I'll ask a few questions about your lifestyle. Let's get started!` },
        { key: 'age', type: 'slider', text: "First, what's your age? üéÇ", label: "Select your age", min: 18, max: 90, step: 1, defaultValue: 30, unit: 'years' },
        { key: 'gender', type: 'question', text: "Got it. What's your biological sex? üß¨", options: ['Male', 'Female', 'Other'], hideInput: true },
        // ... ALL OTHER QUESTIONS FROM quiz.html would be placed here in English
        { key: 'camera', type: 'final_step', text: "You did it! üéâ That's all the questions. Now for the fun part: a quick selfie. This helps me analyze non-medical indicators of stress and fatigue. Your photo is processed on the fly and never stored. Please allow camera access and position your face within the frame." }
    ];

    async function startQuizSession() {
        try {
            const response = await fetch('/.netlify/functions/quiz', {
                method: 'POST', headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ action: 'startSession' })
            });
            if (!response.ok) throw new Error('Could not start session');
            const data = await response.json();
            sessionId = data.sessionId;
            initializeGlobalErrorHandlers();
        } catch (error) {
            console.error('Failed to start session:', error);
            addBotMessage("Sorry, I'm having trouble connecting. Please try refreshing the page.");
            inputArea.style.display = 'none';
        }
    }

    async function saveAnswerToServer(questionKey, answer) {
        if (!sessionId) { console.error('No session ID available'); return; }
        userAnswers[questionKey] = answer;
        try {
            await fetch('/.netlify/functions/quiz', {
                method: 'POST', headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ action: 'saveAnswer', sessionId: sessionId, questionId: questionKey, answer: answer })
            });
        } catch (error) { console.error('Failed to save answer:', error); }
    }
    
    function updateProgressBar() {
        const totalQuestions = quizQuestions.filter(q => q.type === 'question' || q.type === 'slider' || q.type === 'final_step').length;
        const answeredQuestions = Object.keys(userAnswers).length;
        const progress = (answeredQuestions / totalQuestions) * 100;
        progressBar.style.width = `${progress}%`;
    }

    function addBotMessage(html) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'flex justify-start mb-4 chat-bubble';
        messageDiv.innerHTML = `<div class="bot-avatar-lottie mr-3 flex-shrink-0"></div><div class="bg-purple-100 text-gray-800 p-3 rounded-tr-2xl rounded-br-2xl rounded-bl-2xl max-w-xs">${html}</div>`;
        chatContainer.appendChild(messageDiv);
        lottie.loadAnimation({ container: messageDiv.querySelector('.bot-avatar-lottie'), renderer: 'svg', loop: false, autoplay: true, path: 'avatar.json' });
        scrollToBottom();
    }
    function addUserMessage(text) {
        const d = document.createElement('div');
        d.className = 'flex justify-end mb-4 chat-bubble';
        d.innerHTML = `<div class="bg-purple-600 text-white p-3 rounded-tl-2xl rounded-br-2xl rounded-bl-2xl max-w-xs">${text}</div>`;
        chatContainer.appendChild(d);
        scrollToBottom();
    }
    
    function showOptions(options) {
        optionsContainer.innerHTML = '';
        if (options?.length > 0) {
            optionsContainerWrapper.classList.remove('hidden');
            options.forEach(opt => {
                const button = document.createElement('button');
                button.textContent = opt;
                button.className = 'option-btn bg-white border border-purple-300 text-purple-600 px-4 py-2 rounded-full text-sm flex-shrink-0 hover:bg-purple-50';
                button.onclick = () => handleAnswer(opt);
                optionsContainer.appendChild(button);
            });
        } else {
            optionsContainerWrapper.classList.add('hidden');
        }
    }

    function showSlider(question) {
        // ... slider logic from quiz.html ...
    }

    function handleAnswer(answer) {
        const valueToStore = (answer || '').toString().trim();
        if (!valueToStore) return;
        
        const currentQuestion = quizQuestions[currentQuestionIndex];
        addUserMessage(answer);
        saveAnswerToServer(currentQuestion.key, valueToStore);

        userInput.value = '';
        inputArea.classList.add('hidden');
        optionsContainerWrapper.classList.add('hidden');
        
        currentQuestionIndex++;
        updateProgressBar();
        askNextQuestion();
    }
    
    function askNextQuestion() {
        if (currentQuestionIndex >= quizQuestions.length) return;
        const question = quizQuestions[currentQuestionIndex];
        
        setTimeout(() => {
            let questionText = typeof question.text === 'function' ? question.text(userAnswers.name) : question.text;
            addBotMessage(questionText);

            if (question.type === 'message') {
                currentQuestionIndex++;
                setTimeout(askNextQuestion, messageDelay);
            } else if (question.type === 'question') {
                showOptions(question.options);
                if (question.hideInput) {
                    inputArea.classList.add('hidden');
                } else {
                    inputArea.classList.remove('hidden');
                    userInput.placeholder = question.placeholder || "Type...";
                    if (!isMobile()) userInput.focus();
                }
            } else if (question.type === 'slider') {
                 inputArea.classList.add('hidden');
                 // showSlider(question);
            } else if (question.type === 'final_step') {
                 // showCameraStep();
            }
        }, 1200);
    }
    
    async function initQuiz() {
        await startQuizSession();
        if (sessionId) {
            askNextQuestion();
        }
    }
    
    sendBtn.addEventListener('click', () => handleAnswer(userInput.value));
    userInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') handleAnswer(userInput.value);
    });

</script>
</body>
</html>

